#!/usr/bin/env ruby

require "tty-prompt"
require "aws/asmr"
require "aws/asmr/options"

asmr_args, command_args = Aws::ASMR::Options.partition(ARGV)
options = Aws::ASMR::Options.parse(asmr_args)

if options[:version]
  require "aws/asmr/version"
  puts Aws::ASMR::VERSION
  exit(0)
elsif options[:clear]
  Aws::ASMR::Cache.destroy!
  exit(0)
else
end

prompt = TTY::Prompt.new

name = if options[:name]
  options[:name]
else
  alias_keys = Aws::ASMR::Alias.base.keys
  prompt.select("Choose a role you're going to assume:", alias_keys)
end
asmr_alias = Aws::ASMR::Alias.get(name)
assume_role_arn = if asmr_alias
  asmr_alias.set_environment_variables!
  asmr_alias.arn
else
  name
end

def run(command, shell_variables=[])
  if command.empty?
    exec("echo \"#{shell_variables.join($/)}\"")
  else
    exec([*shell_variables, *command].join(' '))
  end
end 

if cache = Aws::ASMR::Cache.get(assume_role_arn)
  run(command_args, cache.shell_variables)
end


begin
  serial_number = Aws::ASMR.detect_mfa_device_serial_number
  assume_role_args = if serial_number
    token_code = prompt.ask("Type MFA token code:")
    {serial_number: serial_number, token_code: token_code}
  else
    {}
  end

  res = Aws::ASMR.assume_role(assume_role_arn, **assume_role_args)
  cache = Aws::ASMR::Cache.new(**res.credentials.to_h)
  cache.save!(assume_role_arn)
  run(command_args, cache.shell_variables)
rescue => e
  STDERR.puts e.message
  exit(1)
end